--- /dev/null
+++ b/sound/soc/ar71xx/Kconfig
@@ -0,0 +1,4 @@
+config SND_AR71XX_SOC_I2S
+	tristate "SoC Aduio support for the AR71XX I2S Module"
+	help
+	  Say Y or M...
--- /dev/null
+++ b/sound/soc/ar71xx/Makefile
@@ -0,0 +1,4 @@
+# AR71XX Platform Support
+snd-soc-ar71xx-i2s-objs := ar71xx-i2s.o
+
+obj-$(CONFIG_SND_AR71XX_SOC_I2S) += snd-soc-ar71xx-i2s.o
--- /dev/null
+++ b/sound/soc/ar71xx/ar71xx-i2s.c
@@ -0,0 +1,143 @@
+/*
+ * ALSA SoC I2S Audio Layer for AR9331
+ *
+ */
+
+/* GPIO function registers */
+#define AR71XX_GPIO_FUNCTION			0x18040028
+#define AR71XX_GPIO_FUNCTION_SPDIF2TCK		BIT(31)
+#define AR71XX_GPIO_FUNCTION_SPDIF_EN		BIT(30)
+#define AR71XX_GPIO_FUNCTION_I2SO_22_18_EN	BIT(29)
+#define AR71XX_GPIO_FUNCTION_I2S_MCKEN		BIT(27)
+#define AR71XX_GPIO_FUNCTION_I2SO_EN		BIT(26)
+
+/* I2S registers */
+#define AR71XX_I2S_BASE				0x180B0000
+#define AR71XX_I2S_STEREO0_CONFIG		(AR71XX_I2S_BASE + 0x00)
+#define AR71XX_I2S_STEREO0_VOLUME		(AR71XX_I2S_BASE + 0x04)
+#define AR71XX_I2S_STEREO0_TX_SAMPLE_CNT_LSB	(AR71XX_I2S_BASE + 0x0C)
+#define AR71XX_I2S_STEREO0_TX_SAMPLE_CNT_MSB	(AR71XX_I2S_BASE + 0x10)
+#define AR71XX_I2S_STEREO0_RX_SAMPLE_CNT_LSB	(AR71XX_I2S_BASE + 0x14)
+#define AR71XX_I2S_STEREO0_RX_SAMPLE_CNT_MSB	(AR71XX_I2S_BASE + 0x18)
+#define AR71XX_I2S_STEREO0_CLK_DIV		(AR71XX_I2S_BASE + 0x1C)
+
+/* STEREO0_CONFIG masks */
+#define AR71XX_I2S_DIV_BYPASS			BIT(25)
+#define AR71XX_I2S_AUDIO_CLOCK_SEL		BIT(24)
+#define AR71XX_I2S_SPDIF_ENABLE			BIT(23)
+#define AR71XX_I2S_REFCLK_SEL			BIT(22)
+#define AR71XX_I2S_ENABLE			BIT(21)
+#define AR71XX_I2S_MIC_RESET			BIT(20)
+#define AR71XX_I2S_RESET			BIT(19)
+#define AR71XX_I2S_I2S_DELAY			BIT(18)
+#define AR71XX_I2S_PCM_SWAP			BIT(17)
+#define AR71XX_I2S_MIC_WORD_SIZE		BIT(16)
+#define AR71XX_I2S_SETERO_MONO 			//15:14
+#define AR71XX_I2S_DATA_WORD_SIZE		//13:12
+#define AR71XX_I2S_I2S_WORD_SIZE		BIT(11)
+#define AR71XX_I2S_MCK_SEL			BIT(10)
+#define AR71XX_I2S_SAMPLE_CNT_CLEAR_TYPE	BIT(9)
+#define AR71XX_I2S_MASTER			BIT(8)
+#define AR71XX_I2S_POSEDGE			//7:0
+
+/* STEREO0_VOLUME masks */
+#define AR71XX_I2S_CHANNEL1(v)			((v) << 8)
+#define AR71XX_I2S_CHANNEL0(v)			(v)
+
+/* Tx and Rx Counter masks */
+#define AR71XX_I2S_SAMPLE_COUNTER_CH0		(0xFFFF)
+#define AR71XX_I2S_SAMPLE_COUNTER_CH1		(0xFFFF << 16)
+
+/* STEREO_CLOCK_DIV masks */
+#define AR71XX_I2S_DIV_INT(v)			((v) << 16)
+#define AR71XX_I2S_DIV_FRAC(v)			(v)
+
+
+//XXX for testing
+/* GPIO registers */
+#define AR71XX_GPIO_BASE			(0x18040000)
+#define AR71XX_GPIO_OE				((AR71XX_GPIO_BASE) + 0x00)
+#define AR71XX_GPIO_IN				((AR71XX_GPIO_BASE) + 0x04)
+#define AR71XX_GPIO_OUT				((AR71XX_GPIO_BASE) + 0x08)
+#define AR71XX_GPIO_SET				((AR71XX_GPIO_BASE) + 0x0C)
+#define AR71XX_GPIO_CLEAR			((AR71XX_GPIO_BASE) + 0x10)
+#define AR71XX_GPIO(v)				(1 << (v))
+
+#include <linux/init.h>		// __init, __exit
+#include <linux/module.h>	// macros (MODULE...)
+#include <linux/fs.h>		// struct file_operations
+
+
+/* virtual register address */
+//XXX gpio test
+static void *gpio_oe;
+static void *gpio_set;
+static void *gpio_clear;
+
+//XXX gpio test
+void setup_gpio(void)
+{
+	#define MY_GPIO		10
+	uint32_t val = 0;
+	val |= AR71XX_GPIO(MY_GPIO);
+
+	gpio_oe = val;
+	gpio_set = val;
+
+	#undef MY_GPIO
+}
+
+
+void end_gpio(void)
+{
+	#define MY_GPIO		10
+	uint32_t val = 0;
+	val |= AR71XX_GPIO(MY_GPIO);
+
+	gpio_clear = val;
+	#undef MY_GPIO
+}
+
+static struct file_operations fops = {
+	.owner = THIS_MODULE,
+//	.read = driver_read,
+//	.open = driver_open,
+//	.release = driver_close,
+};
+
+static int __init mod_init(void)
+{
+	if (register_chrdev(240, "I2S Driver", &fops) != 0) {
+		printk("Initializing I2S Driver failed\n");
+		return -EIO;
+	}
+
+	/* request i/o remapping */
+	// XXX gpio test 
+	// TODO test sizes!
+	gpio_out = ioremap(AR71XX_GPIO_OE, SZ_64K);
+	gpio_set = ioremap(AR71XX_GPIO_SET, SZ_64K);
+	gpio_clear = ioremap(AR71XX_GPIO_CLEAR, SZ_64K);
+
+
+	setup_gpio();
+
+	return 0;
+}
+
+static void __exit mod_exit(void)
+{
+	iounmap(gpio_out);	
+	iounmap(gpio_set);	
+	iounmap(gpio_clear);	
+
+	unregister_chrdev(BCM2708_BIT_READER_MAJNUM, "Bit Reader");
+}
+
+module_init (mod_init);
+module_exit (mod_exit);
+
+MODULE_AUTHOR("Felix Kramer");
+MODULE_LICENSE("GPL"); 
+MODULE_DESCRIPTION("Reads a bit stream and generates a clock");
+MODULE_SUPPORTED_DEVICE("Raspberry Pi (BCM2835)");
--- a/sound/soc/Kconfig
+++ b/sound/soc/Kconfig
@@ -34,6 +34,7 @@ config SND_SOC_GENERIC_DMAENGINE_PCM
 	select SND_SOC_DMAENGINE_PCM
 
 # All the supported SoCs
+source "sound/soc/ar71xx/Kconfig"
 source "sound/soc/atmel/Kconfig"
 source "sound/soc/au1x/Kconfig"
 source "sound/soc/blackfin/Kconfig"
--- a/sound/soc/Makefile
+++ b/sound/soc/Makefile
@@ -12,6 +12,7 @@ endif
 obj-$(CONFIG_SND_SOC)	+= snd-soc-core.o
 obj-$(CONFIG_SND_SOC)	+= codecs/
 obj-$(CONFIG_SND_SOC)	+= generic/
+obj-$(CONFIG_SND_SOC)	+= ar71xx/
 obj-$(CONFIG_SND_SOC)	+= atmel/
 obj-$(CONFIG_SND_SOC)	+= au1x/
 obj-$(CONFIG_SND_SOC)	+= blackfin/
